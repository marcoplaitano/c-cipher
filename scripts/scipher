#!/bin/bash

# File:   scipher
# Author: Marco Plaitano
# Github: https://github.com/marcoplaitano
# Date:   22 May 2022
# Brief:  Wrapper for the ccipher command. It allows the user to interact with
#         an encrypted file containing passwords and credentials (or any other
#         sensible information).
#
# C-CIPHER
# A program to encrypt/decrypt a file using the AES-CTR-256 cipher.



################################################################################
###   VARIABLES
################################################################################

# Program needed for encryption/decryption.
readonly PROGRAM_FILE="$HOME/.local/bin/ccipher"

# Folder in which to store encrypted and (temporary) decrypted version.
readonly MAIN_FOLDER="$HOME/.scipher"

# File containing the encrypted information. DO NOT DELETE IT.
readonly ENCRYPTED_FILE="$MAIN_FOLDER"/encrypted.dat

# Temporary file used to store the plaintext version of the encrypted one.
readonly PLAINTEXT_FILE="$MAIN_FOLDER"/.plain.txt

# Text editor to edit the file in.
readonly EDITOR=${EDITOR:="nano"}



################################################################################
###   FUNCTIONS
################################################################################

# Show a quick guide to explain what the script does and how it works.
function show_help {
    echo $"NAME
    scipher

SYNOPSIS
    scipher [OPTION]...

DESCRIPTION
    This script is a wrapper for the 'ccipher' command.
    It allows you to interact with an encrypted file containing passwords and
    credentials (or any other sensible information).

    The encrypted file can be located anywhere in the system, as long as the
    user has read and write permissions to it.

OPTIONS
    -h, --help
        Show help guide and exit.

    --hide
        Don't show the input while typing in the password.

    -w, --write
        Edit the file to add/modify entries.
        This is also the option to use the first time you run the script; it
        will create the file and let you write something in it.

    -r [STRING], --read [STRING]
        Show a decrypted version of the entire file or of any lines containing
        STRING, if STRING is given.

    -e, --export
        Decrypt the file and save a copy of the plaintext.
        If you only need to take a quick look, consider using '--read' instead.

CONFIGURATION
    A few parameters, like the editor of choice or the files' paths can be
    modified inside the script's file.
    NOTE: Only modify lines in the 'VARIABLES' section." | more -d
}


# Make sure to delete the plaintext version of the file before exiting the
# script.
function secure_exit {
    [[ -f "$PLAINTEXT_FILE" ]] && rm "$PLAINTEXT_FILE"
    clear
    exit $1
}

# Redirect any "quit" signal to the secure_exit function.
trap "secure_exit" SIGINT SIGTERM


# Encrypt the plaintext version of the file.
function encrypt {
    "$PROGRAM_FILE" "$PLAINTEXT_FILE" "$ENCRYPTED_FILE" encrypt "$PASSWORD"
    [[ $? -ne 0 ]] && secure_exit 1
}


# Decrypt the file.
function decrypt {
    "$PROGRAM_FILE" "$ENCRYPTED_FILE" "$PLAINTEXT_FILE" decrypt "$PASSWORD"
    [[ $? -ne 0 ]] && secure_exit 1
}


# Ask for a string in input.
function input {
    local prompt="$1"
    prompt=${prompt:="> "}
    unset answer

    # Keep asking if answer is empty.
    while [[ -z $answer ]]; do
        read -rp "(Type X to exit) $prompt" answer
    done

    # Use 'X' as special input signifying exit.
    [[ "$answer" == X ]] && secure_exit 1
    echo "$answer"
}


# Ask for confirmation.
function ask_confirm {
    local prompt="$1"
    prompt=${prompt:="Yes or no? "}

    ans=$(input "$prompt") || secure_exit 2
    case $ans in
        [yY] | [yY][eE][sS])
            exit 0 ;;
        *)
            exit 1 ;;
    esac
}


# Ask the user to write a path to a file.
function ask_path_to_file {
    unset file
    file=$(input "Save plaintext to: ") || exit 1

    # Replace ~ with $HOME
    [[ "$file" == '~'/* ]] && file=${file/'~'/$HOME}

    # Prepend global path if path is local.
    [[ "$file" != /* ]] && file="$(pwd)"/"$file"

    # Do not accept directories as valid choice.
    if [[ -d "$file" ]]; then
        unset file
    # Ask for confirmation.
    else
        ans=$(ask_confirm "Confirm file '""$file""'? ")
        case $? in
            2) exit 1 ;;
            1) unset file ;;
        esac
    fi

    echo "$file"
}


# Ask the user to write the master password needed to encrypt/decrypt the data.
function ask_password {
    if [[ -n $HIDE_TYPING ]]; then
        read -rsp "Password: " PASSWORD
        echo
    else
        read -rp "Password: " PASSWORD
    fi
    if [[ -z $PASSWORD ]]; then
        echo "Password can't be an empty string."
        exit 1
    fi
}


# Show the decrypted version of the file.
function action_read_file {
    # Nothing to do if the file is empty.
    if [[ ! -s "$ENCRYPTED_FILE" ]]; then
        echo "The file is empty. You might want to edit it first."
        exit 1
    fi
    # Decrypt the file to let the user see it.
    ask_password
    decrypt

    local string="$1"

    # Clear the screen to hide the password.
    clear

    # If a string is given, show any lines containing it.
    if [[ -n $string ]]; then
        grep --color=auto -i -n -C 2 "$string" "$PLAINTEXT_FILE"
        [[ $? -ne 0 ]] && echo "No match found for '""$string""'."

    # If no string is given, show the entire file.
    else
        more -d "$PLAINTEXT_FILE"
    fi

    # Wait for a key press and then clear the screen.
    read -N 1 -rsp "Press any key to quit..."
    clear
}


# Edit the decrypted version of the file.
function action_write_file {
    # If the encrypted file is empty it means that the user is creating it now.
    if [[ ! -s "$ENCRYPTED_FILE" ]]; then
        echo "Choose CAREFULLY the password with which to encrypt your data and"
        echo "NEVER LOSE IT."
        echo "Without it you won't be able to access the contents of the file."
        ask_password
    else
        # Decrypt the file to let the user edit it.
        ask_password
        decrypt
    fi

    $EDITOR "$PLAINTEXT_FILE"

    # Ask whether to keep the changes.
    echo "When you're done editing, answer the question below."
    ans=$(ask_confirm "Save changes? ")
    case $? in
        0)
            encrypt
            echo "OK changes saved." ;;
        *)
            echo "All changes have been discarded." ;;
    esac
}


# Decrypt the file and save a copy of the plaintext.
function action_export_file {
    # Nothing to do if the file is empty.
    if [[ ! -s "$ENCRYPTED_FILE" ]]; then
        echo "The file is empty. You might want to edit it first."
        exit 1
    fi

    ask_password

    # Ask the user where to save plaintext.
    unset out_file
    while [[ -z $out_file ]]; do
        out_file=$(ask_path_to_file)
        [[ $? -eq 1 ]] && exit 1
    done

    decrypt

    cp "$PLAINTEXT_FILE" "$out_file"
    [[ $? -eq 0 ]] && echo "Done."
}



################################################################################
###   MAIN PROGRAM
################################################################################

# Parse command line arguments.
while [[ -n $1 ]]; do
    case "$1" in
        -h | --help)
            show_help
            exit 0 ;;
        --hide)
            HIDE_TYPING="TRUE"
            shift ;;
        -e | --export)
            action="EXPORT"
            shift ;;
        -r | --read)
            action="READ"
            # Add second argument as title to read if it is not another option
            # starting with - (or --).
            if [[ -n "$2" ]] && [[ "$2" != -* ]]; then
                string="$2"
                shift
            fi
            shift ;;
        -w | --write)
            action="WRITE"
            shift ;;
        *)
            echo "Argument '""$1""' not recognized."
            exit 1 ;;
    esac
done


# Check that the program ccipher exists.
if [[ ! -f "$PROGRAM_FILE" ]]; then
    echo "Program file '""$PROGRAM_FILE""' does not exist."
    echo "Make sure you did not move it somewhere else or download it again"
    echo "from https://github.com/marcoplaitano/credentials-storer/"
    exit 1
fi
# Grant executable permission to the program.
chmod +x "$PROGRAM_FILE"

# Create main folder. With the '-p' option it will not throw an error if it
# already exist.
mkdir -p "$MAIN_FOLDER"

# Check that the encrypted file exists.
if [[ ! -f "$ENCRYPTED_FILE" ]] && [[ $action != "WRITE" ]]; then
    echo "Encrypted file does not exist."
    echo "? If this is your first time running the script, run it again with"
    echo "  '-w' option. (see 'scipher --help' for more details)."
    echo "? If you moved it to a different location, please update the path"
    echo "  inside this script."
    exit 1
fi
# Check that the EDITOR variable is correctly set.
if [[ -z $EDITOR ]]; then
    echo "Text editor not declared."
    exit 1
fi
if ! command -v "$EDITOR" >/dev/null 2>&1; then
    echo "Chosen text editor '""$EDITOR""' is not a valid command."
    exit 1
fi
# There is no way to check whether the command is an actual text editor.


# If no action is specified show guide.
if [[ -z $action ]]; then
    show_help
    exit 0
fi

# Execute the desired action.
case $action in
    "EXPORT")
        action_export_file ;;
    "WRITE")
        action_write_file ;;
    "READ")
        action_read_file "$string" ;;
esac

secure_exit 0
